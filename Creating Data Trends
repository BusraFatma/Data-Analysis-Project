1. Prepare and Clean the Data

Identify and handle missing or erroneous data.
Normalize the data if necessary (for example, when the data is on different scales).
Ensure that time series data is properly sorted with consistent intervals.

isualize the Data (Initial Exploration)

Plot the data to observe trends, seasonal patterns, or irregularities.
Line charts are ideal for visualizing time-series trends.

3. Identify the Trend Components
In trend analysis, we focus on 3 main components:

Trend: The overall increase or decrease pattern over time.
Seasonality: Regular and repeating patterns (e.g., seasonal sales spikes).
Irregularity (Noise): Random, unpredictable changes in the data.

4. Apply Moving Average for Smoothing
Moving averages help smooth out short-term fluctuations, making the trend more visible.

import pandas as pd
import matplotlib.pyplot as plt

# Example data
data = pd.DataFrame({'Date': pd.date_range(start='2023-01-01', periods=30),
                     'Sales': [50, 52, 53, 51, 56, 58, 57, 60, 65, 64,
                               62, 63, 67, 68, 65, 70, 75, 77, 76, 80,
                               85, 82, 87, 85, 90, 88, 95, 96, 97, 100]})

# Calculate 7-day moving average
data['Moving Average'] = data['Sales'].rolling(window=7).mean()

# Plot the data
plt.figure(figsize=(10, 5))
plt.plot(data['Date'], data['Sales'], label='Daily Sales')
plt.plot(data['Date'], data['Moving Average'], label='7-Day Moving Average', linewidth=2)
plt.xlabel('Date')
plt.ylabel('Sales')
plt.title('Sales Trend Analysis')
plt.legend()
plt.show()

 5. Use Time-Series Models 
To better understand trends and seasonality, you can apply time-series models such as:

ARIMA (AutoRegressive Integrated Moving Average): Commonly used for forecasting time-series data.
Holt-Winters Model: Suitable for data with both trend and seasonal patterns.

6. Forecasting and Model Validation
Split the data into training and test sets to evaluate model accuracy.
Use error metrics (MAE, MSE, RMSE) to assess model performance.

7. Reporting and Presentation
Visualize the results and create a report with key findings.
Highlight whether a significant trend or seasonality exists and provide actionable insights for the future.

Comprehensive Vibration Monitoring Program for Motors and Fans
Here is an advanced vibration monitoring program that allows you to:

Load real-world data from a file (CSV).
Analyze vibration metrics: RMS, peak, kurtosis, skewness.
Detect anomalies: Using statistical thresholds (e.g., Z-scores).
Plot trends with alerts and peak detection.
Generate reports (in Excel or PDFs) if required.

Program Structure Overview
Reading data from a CSV or sensor input.
Data preprocessing: Calculating key metrics (RMS, peak, skewness).
Anomaly detection: Using Z-scores and peaks.
Visualization: Plotting trends and flagging anomalies.
Optional Reporting: Exporting key findings.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from scipy.stats import skew, kurtosis, zscore

# Step 1: Load the vibration data (CSV or Sensor input)
def load_data(file_path):
    """
    Loads vibration data from a CSV file. Assumes columns: Timestamp, Vibration.
    """
    data = pd.read_csv(file_path, parse_dates=['Timestamp'])
    data = data.sort_values('Timestamp')  # Ensure it's time-ordered
    return data

# Step 2: Calculate Vibration Metrics
def calculate_metrics(df):
    """
    Calculates key metrics: RMS, Peak, Skewness, Kurtosis, and Z-scores.
    """
    df['RMS'] = df['Vibration (mm/s)'].rolling(window=7).mean()
    df['Peak'] = df['Vibration (mm/s)'].rolling(window=7).max()
    df['Skewness'] = df['Vibration (mm/s)'].rolling(window=7).apply(skew)
    df['Kurtosis'] = df['Vibration (mm/s)'].rolling(window=7).apply(kurtosis)
    df['Z-Score'] = zscore(df['Vibration (mm/s)'])
    return df

# Step 3: Detect Anomalies Using Z-Score and Peaks
def detect_anomalies(df, z_threshold=2.0):
    """
    Detects anomalies using Z-scores and significant peaks.
    """
    df['Anomaly'] = df['Z-Score'].abs() > z_threshold
    peaks, _ = find_peaks(df['Vibration (mm/s)'], height=2)
    df['Peak Detected'] = False
    df.loc[peaks, 'Peak Detected'] = True
    return df
# Step 4: Plot Vibration Trends and Anomalies
def plot_vibration_trends(df):
    """
    Plots the vibration trends with RMS, Peak values, and anomaly indicators.
    """
    plt.figure(figsize=(12, 6))
    
    # Plot vibration and rolling RMS
    plt.plot(df['Timestamp'], df['Vibration (mm/s)'], label='Vibration (mm/s)', marker='o')
    plt.plot(df['Timestamp'], df['RMS'], label='7-Day RMS', linewidth=2)
    plt.plot(df['Timestamp'], df['Peak'], label='7-Day Peak', linestyle='--')

    # Mark anomalies and peaks
    anomalies = df[df['Anomaly']]
    plt.scatter(anomalies['Timestamp'], anomalies['Vibration (mm/s)'], 
                color='red', label='Anomalies', zorder=5)

    peaks = df[df['Peak Detected']]
    plt.scatter(peaks['Timestamp'], peaks['Vibration (mm/s)'], 
                color='green', marker='x', label='Peaks', zorder=5)

    plt.xlabel('Timestamp')
    plt.ylabel('Vibration (mm/s)')
    plt.title('Vibration Trend Analysis with Anomalies and Peaks')
    plt.legend()
    plt.grid(True)
    plt.show()

# Step 5: Export Results to CSV or Excel
def export_report(df, output_path='vibration_report.xlsx'):
    """
    Exports the data and metrics to an Excel report.
    """
    df.to_excel(output_path, index=False)
    print(f"Report saved to {output_path}")

# Step 6: Main Function to Run the Analysis
def main(file_path):
    # Load data
    df = load_data(file_path)

    # Calculate metrics
    df = calculate_metrics(df)

    # Detect anomalies
    df = detect_anomalies(df)

    # Plot vibration trends
    plot_vibration_trends(df)

    # Export report
    export_report(df)

# Example Usage
if __name__ == "__main__":
    # Replace 'vibration_data.csv' with the path to your actual data file
    main('vibration_data.csv')
Prepare your data:

Create a CSV file with at least two columns: Timestamp and Vibration (mm/s).
Example:
Timestamp	Vibration (mm/s)
2024-01-01 00:00:00	1.2
2024-01-02 00:00:00	1.5
2024-01-03 00:00:00	2.0
Install dependencies: Run the following command to install the necessary Python libraries:

pip install pandas numpy matplotlib scipy openpyxl
Run the program: Save the code in a file (e.g., vibration_analysis.py). Place your CSV data file in the same directory, and then run the program:

bash
Kodu kopyala
python vibration_analysis.py
Review the output:

The trend graph will display the vibration data, RMS, peak values, and anomalies.
An Excel report will be generated with the complete analysis.
Customization Options:
Adjust Z-score threshold: Change the z_threshold parameter in the detect_anomalies() function to control how sensitive the anomaly detection is.
Change window size: Modify the rolling window size for RMS and peak calculations as needed.
Add more metrics: You can add other statistical metrics like variance or standard deviation.

