import speech_recognition as sr
import time
from gtts import gTTs
import os


# Mikrofona erişim sağlıyoruz
r = sr.Recognizer()

# Ses kaydı sıklığı (Saniye cinsinden)
sample_rate =

# Duygu sıklığı (Dakika cinsinden)
mood_interval = 5

# Duygu anketi sorulduktan sonra geçen süre (Saniye cinsinden)

question_delay = 20

# Duygu sıklığına göre zamanlayıcı başlatılıyor

def schedule_mood_question():
  time.sleep(mood_interval * 60)
  ask_mood()

# Duygu sorusu
def ask_mood():
  print("Şu anda nasıl hissediyorsun? (örn: iyi, kötü, normal)")

# Ses kaydı yapıp, metne dönüştürme işlemi
def record_and_transcribe_audio():
  with sr.Mikrofon() as source:
    print("Konuşmaya başlayınız!")
    audio = r.listen(source)
    try:
        print("Sizden şunları duydum: " + r.recognize_google(audio))
    expect sr.UnknownValueError:
        print("Ses tanıma işlemi başarısız oldu!")

import librosa
import librosa.display
import numpy as np
import matplotlib.pyplot as plt

audio_path = 'ses_dosyasi.wav'  # Analiz etmek istediğiniz ses dosyasının yolu
y, sr = librosa.load(audio_path) 

plt.figure(figsize=(10, 4))
librosa.display.waveshow(y, sr=sr)
plt.title('Dalga Formu')
plt.xlabel('Zaman (s)')
plt.ylabel('Genlik')
plt.show()
      
D = np.abs(librosa.stft(y))  # STFT (Kısa Süreli Fourier Dönüşümü)
DB = librosa.amplitude_to_db(D, ref=np.max)
plt.figure(figsize=(10, 6))
librosa.display.specshow(DB, sr=sr, x_axis='time', y_axis='log')
plt.colorbar(format='%+2.0f dB')
plt.title('Spektrogram (dB)')
plt.xlabel('Zaman (s)')
plt.ylabel('Frekans (Hz)')
plt.show()
frequencies, magnitudes = librosa.core.piptrack(y=y, sr=sr)

plt.figure(figsize=(10, 4))
plt.plot(magnitudes.T)
plt.title('Frekans Bileşenleri')
plt.xlabel('Zaman (frame)')
plt.ylabel('Frekans (Hz)')
plt.show()

import librosa
import librosa.display
import numpy as np
import matplotlib.pyplot as plt

filename = 'ornek_ses.wav'  # analiz edilecek ses dosyasının yolu

y, sr = librosa.load(filename)

mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)

zcr = librosa.feature.zero_crossing_rate(y)

rms = librosa.feature.rms(y=y)

plt.figure(figsize=(12, 8))

plt.subplot(3, 1, 1)
librosa.display.waveshow(y, sr=sr)
plt.title('Waveform')

plt.subplot(3, 1, 2)
plt.plot(zcr[0], color='r')
plt.title('Zero Crossing Rate')

