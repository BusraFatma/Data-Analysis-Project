import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

# Örnek veriler (vibrasyon sinyali) oluşturma
# Gerçek dünya verileri için bu verileri sensörlerden alabilirsiniz
sampling_rate = 1000  # Hz

T = 1.0 / sampling_rate  # Örnekleme periyodu
t = np.arange(0.0, 1.0, T)  # 1 saniyelik zaman vektörü

# Sinyal oluşturma: Bu örnekte iki frekansta sinyal ekliyoruz
f1 = 50.0  # 50 Hz
f2 = 150.0  # 150 Hz
y = 0.5 * np.sin(2 * np.pi * f1 * t) + np.sin(2 * np.pi * f2 * t)

# Fast Fourier Transform (FFT) kullanarak sinyalin frekans spektrumunu bulalım
N = len(t)
yf = fft(y)
xf = fftfreq(N, T)[:N // 2]  # Frekans aralığı
yplot = 2.0 / N * np.abs(yf[:N // 2])  # Amplitüdü normalize etme

# Frekans spektrumunu çizelim
plt.figure(figsize=(10, 6))
plt.plot(xf, yplot)
plt.title("Vibrasyon Sinyali Frekans Spektrumu")
plt.xlabel("Frekans (Hz)")
plt.ylabel("Amplitüd")
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.fft import fft, fftfreq

# Gerçek zamanlı sensör verisi simülasyonu (Verilerinizi burada alacağız)
def load_sensor_data(file_path):
    data = pd.read_csv(file_path)
    time = data['time']  # Zaman verisini alıyoruz
    signal = data['signal']  # Sinyal verisini alıyoruz
    return time, signal

# FFT ve frekans analiz fonksiyonu
def perform_fft(time, signal):
    sampling_rate = 1 / (time[1] - time[0])  # Örnekleme hızı
    N = len(time)  # Veri uzunluğu
    T = 1.0 / sampling_rate  # Örnekleme periyodu
    yf = fft(signal)  # FFT hesaplama
    xf = fftfreq(N, T)[:N // 2]  # Frekans vektörü
    yplot = 2.0 / N * np.abs(yf[:N // 2])  # Normalizasyon
    return xf, yplot

# Gerçek zamanlı analiz ve görselleştirme
def real_time_analysis(file_path):
    # Veriyi yükle
    time, signal = load_sensor_data(file_path)

  # FFT ile analiz et
    xf, yplot = perform_fft(time, signal)
   # Frekans spektrumunu çiz
    plt.figure(figsize=(10, 6))
    plt.plot(xf, yplot)
    plt.title("Vibrasyon Sinyali Frekans Spektrumu")
    plt.xlabel("Frekans (Hz)")
    plt.ylabel("Amplitüd")
    plt.grid(True)
    plt.show()
